#~~~~~~~~~~ UTILS: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# F1: CoolWrite define colors:
    function coolWrite{
    <#
    .SYNOPSIS
        Sets color schemes for Write-host outputs.
    .DESCRIPTION
        Uses the schemes defined in begin{}
    .PARAMETER Color
        color of background. The text coolor is always white except when the backgroud is yellow (text = blue).
    .PARAMETER Message
        The Text to be colored  
    .EXAMPLE
        coolwrite -BGColor Green -FontColor red -Message2Write "hi me"
        Or, using spalt:
        $myarg = @{
            BGColor = 'Red'
            FontColor = 'White'
            Message2Write = "Hi, This text will be with Red BG"
            }
        coolWrite @myarg        
    .NOTES
        Author: Ratan Mohapatra
        Last Update: March 10, 2019
    #>
        [CmdletBinding()]
        param(
                [Parameter(Mandatory=$false)][ValidateSet('Cyan','Green','Red','Yellow', 'White')][string]$BGColor = 'White',
                [Parameter(Mandatory=$false)][ValidateSet('Black','Blue', 'Cyan','Green','Red','Yellow','White')][string]$FontColor = 'Blue',
                [Parameter(Mandatory=$true)][string]$Message2Write
                )
            begin{$scheme =$null 
                $scheme = @{BackgroundColor = $BGColor; ForegroundColor = $FontColor}
                }
            process{
                try{Write-Host @scheme "`n`n $Message2Write "}
                catch{Write-Error "$($_.Exception.Message) - Line Number: $($_.InvocationInfo.ScriptLineNumber)"}
                finally{}
                }
            end{}
            }

# F2. Create an output folder if not there:
    function makeFolder{
    <#
    .SYNOPSIS
        Create a folder.
    .DESCRIPTION
        Creates a folder if it does not exist.
    .PARAMETER FolderPath
        full path e.g., c:\myshare\output
    .EXAMPLE
        makeFolder -FolderPath c:\myshare
    .NOTES
        Author: Ratan Mohapatra
        Last Update: March 10, 2019

    #>
        [CmdletBinding()]
        param( [string]$FolderPath )
        begin{$itemType = "directory"}
        process{
            try{
                if (!(Test-Path $FolderPath)){
                    new-item -Path $FolderPath -ItemType $itemType -Force
                    return $true
                    }
                }
            catch{
                Write-Error "$($_.Exception.Message) - Line Number: $($_.InvocationInfo.ScriptLineNumber)"
                return $false
                }
                }
        end{}
        }
        
# F3. Write to output File:
    function write2File(){
    <#
    .SYNOPSIS
        Write data to a text file.
    .DESCRIPTION
        Appends data to a log file.
    .PARAMETER FilePath
        Complete file path.
    .PARAMETER HeaderCaption
        Header for each section of output data.
    .PARAMETER WriteText
        Text to be written.
    .EXAMPLE
        write2File -FilePath $env:userprofile\desktop\output.txt -HeaderCaption "Active Directory User Account Data" -WriteText $res
    .NOTES
        Author: Ratan Mohapatra
        Last Update: March 10, 2019
    #>
        [CmdletBinding()]
        param(
            [string]$FilePath,
            [string]$HeaderCaption,
            [string]$WriteText
            )
        process{
            try{
                if(Test-Path $FilePath){
                    $HeaderCaption | out-file $FilePath -Append
                    $WriteText | Out-File -FilePath $FilePath -Append     
                    }
                return "Witten to the Output file!"
                }
            catch{
                Write-Error "$($_.Exception.Message) - Line Number: $($_.InvocationInfo.ScriptLineNumber)"
                return
                }
            }
        }

# F4. Pick a file:
    Function pickFile(){
    <#
    .SYNOPSIS
        PIck a file from the file to process.
    .DESCRIPTION
        Uses Windows File box to pick a file.
    .PARAMETER FileType
        color of background. The text coolor is always white except when the backgroud is yellow (text = blue).
    .EXAMPLE
        pickFile -FileType TXT
    .NOTES
        Author: Ratan Mohapatra
        Last Update: March 10, 2019
    #>
        [CmdletBinding()]
        param(
            [ValidateSet('CSV','Text')][string]$FileType,
            [string]$initialDirectory = "$env:USERPROFILE\desktop" 
            )
        begin{
            [System.Reflection.Assembly]::LoadWithPartialName("System.windows.forms") | Out-Null
            $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
            $OpenFileDialog.initialDirectory = $initialDirectory        
            }
        Process{
            switch($FileType){
                'CSV'{ $OpenFileDialog.filter = "CSV (*.csv)| *.csv" }
                'TXT'{ $OpenFileDialog.filter = "TXT (*.txt)| *.txt" }
                }
            try{
                $OpenFileDialog.ShowDialog() | Out-Null
                return $OpenFileDialog.filename
                }
            catch{ Write-Error "$($_.Exception.Message) - Line Number: $($_.InvocationInfo.ScriptLineNumber)" }
            finally{}
            }
        end{}
        }

# F5. Check user string to see if Email address:
    function getUserAccountID{
    <#
    .SYNOPSIS
        Checks a String of username or email and extracts the SamAccoutName.
    .DESCRIPTION
        Used with get-aduser accepts both SamAccoutName and userprincipalname. Extracts the SamAccountName.
        [Regex]::match
    .PARAMETER UserIDString
        SamAccountName or Email.
    .EXAMPLE
        getSamAccountName -UserIDString me@myemail.com
    .NOTES
        Author: Ratan Mohapatra
        Last Update: March 10, 2019    
    #>
        [CmdletBinding()]
        param( [string]$UserIDString )
        process{
            try{
                if(!(([regex]::match($usrIDString,"@")).success)){
                    return @($usrIDString,'0')
                    }
                else{
                    $usrIDArray = $usrIDString.Split('@')
                    return $usrIDArray
                    }                      
                }
            catch{Write-Error "$($_.Exception.Message) - Line Number: $($_.InvocationInfo.ScriptLineNumber)"}         
           }
        }
